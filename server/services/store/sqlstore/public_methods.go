// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by "make generate" from the Store interface
// DO NOT EDIT
//
// To add a transactional public method, create an entry in the Store
// interface and a private method in the store itself with tx as the
// first parameter before running `make generate`

package sqlstore

import (
	"context"

	"github.com/mattermost/focalboard/server/model"
	"github.com/mattermost/focalboard/server/services/store"

	"github.com/mattermost/mattermost-server/v6/shared/mlog"
)

func (s *SQLStore) CleanUpSessions(expireTime int64) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.cleanUpSessions(tx, expireTime)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "CleanUpSessions"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) CreateSession(session *model.Session) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.createSession(tx, session)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "CreateSession"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) CreateUser(user *model.User) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.createUser(tx, user)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "CreateUser"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) DeleteBlock(c store.Container, blockID string, modifiedBy string) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.deleteBlock(tx, c, blockID, modifiedBy)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "DeleteBlock"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) DeleteSession(sessionID string) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.deleteSession(tx, sessionID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "DeleteSession"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) GetActiveUserCount(updatedSecondsAgo int64) (int, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return 0, txErr
	}
	result, err := s.getActiveUserCount(tx, updatedSecondsAgo)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetActiveUserCount"))
		}
		return 0, err
	}

	if err := tx.Commit(); err != nil {
		return 0, err
	}

	return result, nil
}

func (s *SQLStore) GetAllBlocks(c store.Container) ([]model.Block, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getAllBlocks(tx, c)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetAllBlocks"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetBlock(c store.Container, blockID string) (*model.Block, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getBlock(tx, c, blockID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetBlock"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetBlockCountsByType() (map[string]int64, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getBlockCountsByType(tx)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetBlockCountsByType"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetBlocksWithParent(c store.Container, parentID string) ([]model.Block, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getBlocksWithParent(tx, c, parentID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetBlocksWithParent"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetBlocksWithParentAndType(c store.Container, parentID string, blockType string) ([]model.Block, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getBlocksWithParentAndType(tx, c, parentID, blockType)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetBlocksWithParentAndType"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetBlocksWithRootID(c store.Container, rootID string) ([]model.Block, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getBlocksWithRootID(tx, c, rootID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetBlocksWithRootID"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetBlocksWithType(c store.Container, blockType string) ([]model.Block, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getBlocksWithType(tx, c, blockType)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetBlocksWithType"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetParentID(c store.Container, blockID string) (string, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return "", txErr
	}
	result, err := s.getParentID(tx, c, blockID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetParentID"))
		}
		return "", err
	}

	if err := tx.Commit(); err != nil {
		return "", err
	}

	return result, nil
}

func (s *SQLStore) GetRegisteredUserCount() (int, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return 0, txErr
	}
	result, err := s.getRegisteredUserCount(tx)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetRegisteredUserCount"))
		}
		return 0, err
	}

	if err := tx.Commit(); err != nil {
		return 0, err
	}

	return result, nil
}

func (s *SQLStore) GetRootID(c store.Container, blockID string) (string, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return "", txErr
	}
	result, err := s.getRootID(tx, c, blockID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetRootID"))
		}
		return "", err
	}

	if err := tx.Commit(); err != nil {
		return "", err
	}

	return result, nil
}

func (s *SQLStore) GetSession(token string, expireTime int64) (*model.Session, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getSession(tx, token, expireTime)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetSession"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetSharing(c store.Container, rootID string) (*model.Sharing, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getSharing(tx, c, rootID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetSharing"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetSubTree2(c store.Container, blockID string) ([]model.Block, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getSubTree2(tx, c, blockID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetSubTree2"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetSubTree3(c store.Container, blockID string) ([]model.Block, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getSubTree3(tx, c, blockID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetSubTree3"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetSystemSettings() (map[string]string, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getSystemSettings(tx)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetSystemSettings"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetUserByEmail(email string) (*model.User, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getUserByEmail(tx, email)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetUserByEmail"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetUserByID(userID string) (*model.User, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getUserByID(tx, userID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetUserByID"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetUserByUsername(username string) (*model.User, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getUserByUsername(tx, username)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetUserByUsername"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetUserWorkspaces(userID string) ([]model.UserWorkspace, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getUserWorkspaces(tx, userID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetUserWorkspaces"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetUsersByWorkspace(workspaceID string) ([]*model.User, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getUsersByWorkspace(tx, workspaceID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetUsersByWorkspace"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetWorkspace(ID string) (*model.Workspace, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.getWorkspace(tx, ID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetWorkspace"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil
}

func (s *SQLStore) GetWorkspaceCount() (int64, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return 0, txErr
	}
	result, err := s.getWorkspaceCount(tx)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "GetWorkspaceCount"))
		}
		return 0, err
	}

	if err := tx.Commit(); err != nil {
		return 0, err
	}

	return result, nil
}

func (s *SQLStore) HasWorkspaceAccess(userID string, workspaceID string) (bool, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return false, txErr
	}
	result, err := s.hasWorkspaceAccess(tx, userID, workspaceID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "HasWorkspaceAccess"))
		}
		return false, err
	}

	if err := tx.Commit(); err != nil {
		return false, err
	}

	return result, nil
}

func (s *SQLStore) InsertBlock(c store.Container, block *model.Block, userID string) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.insertBlock(tx, c, block, userID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "InsertBlock"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) PatchBlock(c store.Container, blockID string, blockPatch *model.BlockPatch, userID string) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.patchBlock(tx, c, blockID, blockPatch, userID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "PatchBlock"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) RefreshSession(session *model.Session) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.refreshSession(tx, session)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "RefreshSession"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) SetSystemSetting(key string, value string) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.setSystemSetting(tx, key, value)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "SetSystemSetting"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) UpdateSession(session *model.Session) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.updateSession(tx, session)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "UpdateSession"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) UpdateUser(user *model.User) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.updateUser(tx, user)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "UpdateUser"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) UpdateUserPassword(username string, password string) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.updateUserPassword(tx, username, password)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "UpdateUserPassword"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) UpdateUserPasswordByID(userID string, password string) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.updateUserPasswordByID(tx, userID, password)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "UpdateUserPasswordByID"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) UpsertSharing(c store.Container, sharing model.Sharing) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.upsertSharing(tx, c, sharing)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "UpsertSharing"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) UpsertWorkspaceSettings(workspace model.Workspace) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.upsertWorkspaceSettings(tx, workspace)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "UpsertWorkspaceSettings"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}

func (s *SQLStore) UpsertWorkspaceSignupToken(workspace model.Workspace) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.upsertWorkspaceSignupToken(tx, workspace)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "UpsertWorkspaceSignupToken"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}
